# -------------------------------
# 1. Install & import libraries
# -------------------------------
!pip install tensorflow keras matplotlib --quiet

import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam

tf.get_logger().setLevel('ERROR')

# -------------------------------
# 2. Generate realistic synthetic fruit images
# -------------------------------
def generate_synthetic_fruit_images(num_images=10):
    X = []
    y = []
    for _ in range(num_images):
        if np.random.rand() > 0.5:
            # Fresh fruit: bright green/red colors
            img = np.random.randint(100, 256, (224,224,3), dtype=np.uint8)
            label = 1
        else:
            # Rotten fruit: brown/dark colors
            img = np.random.randint(50, 150, (224,224,3), dtype=np.uint8)
            label = 0
        X.append(img)
        y.append(label)
    X = np.array(X) / 255.0
    y = np.array(y)
    return X, y

X_train, y_train = generate_synthetic_fruit_images(20)
X_test, y_test = generate_synthetic_fruit_images(5)

# -------------------------------
# 3. Build the model
# -------------------------------
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224,224,3))
x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(128, activation='relu')(x)
predictions = Dense(1, activation='sigmoid')(x)
model = Model(inputs=base_model.input, outputs=predictions)

# Freeze base layers
for layer in base_model.layers:
    layer.trainable = False

# Compile
model.compile(optimizer=Adam(0.001), loss='binary_crossentropy', metrics=['accuracy'])

# -------------------------------
# 4. Train the model
# -------------------------------
history = model.fit(X_train, y_train, epochs=5, batch_size=2, validation_data=(X_test, y_test))

# -------------------------------
# 5. Visualize training
# -------------------------------
plt.figure(figsize=(12,5))
plt.subplot(1,2,1)
plt.plot(history.history['accuracy'], label='Train Accuracy')
plt.plot(history.history['val_accuracy'], label='Val Accuracy')
plt.title("Accuracy")
plt.legend()

plt.subplot(1,2,2)
plt.plot(history.history['loss'], label='Train Loss')
plt.plot(history.history['val_loss'], label='Val Loss')
plt.title("Loss")
plt.legend()
plt.show()

# -------------------------------
# 6. Predict on synthetic test images
# -------------------------------
preds = model.predict(X_test)
for i in range(len(X_test)):
    label = "Fresh" if preds[i][0] > 0.5 else "Rotten"
    plt.imshow(X_test[i])
    plt.title(f"Predicted: {label}")
    plt.axis('off')
    plt.show()
